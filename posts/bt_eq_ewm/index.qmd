---
title: "Backtest: Momentum (Naive)"
author: "Tom Williams"
date: "2023-08-08"
categories: []
draft: false
execute:
  daemon: false
---

In this post, ...

## Setup

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Auto reload"
%load_ext autoreload
%autoreload 2
```

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Environment"
import os
import sys
import importlib
sys.path.append("C:/hc/src")
sys.path.append("C:/hc/rambling")
sys.path.append("C:/hc/xfactors/src")
sys.path.append("C:/hc/xtuples/src")
os.environ["MODULE"] = "c:/hc/src/"
```

```{python}
#| code-fold: false
#| code-summary: "Imports"
import numpy
import pandas
import jax
import jax.numpy

import xtuples as xt
import xfactors as xf

import hcbt.data.prices.int as prices
import hcbt.algos.universe.int as universe
import hcbt.algos.universe.configs as configs
import bt
```

### Data


```{python}
#| code-fold: false
#| code-summary: "Returns"
df_returns = prices.returns_df(
    xf.utils.dates.y(2005),
    xf.utils.dates.y(2023, m=4),
    indices=configs.INDICES_MAJOR,
) 
``` 

The returns are from bloomberg, and include all cash and non-cash adjustments (in production we have a separate internal ticker for the dividend stream from a given name, but that's a little over-complicated for our purposes here).

We'll also load the relevant index membership mapping tables for our universe:

```{python}
#| code-fold: false
#| code-summary: ""
dfs_indices = universe.rolling_indices(
    xf.utils.dates.y(2005),
    xf.utils.dates.y(2023, m=4),
    indices=configs.INDICES_MAJOR,
)
df_universe = universe.index_union(dfs_indices)
```

reference: equal long only rolling universe

```{python}
#| code-fold: false
#| code-summary: ""
acc, strat = xf.bt.backtests.build(
    dict(

    ),
    df_universe,
    name="European Single Name: Equal Weighted",
    rolling_universe=True,
    equal=True,
)
res = xf.bt.backtests.run(acc, df_returns, strat)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

trend:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=False)),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(combine=True),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

now z score

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=2 / 31)),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(combine=True),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

Weekly

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=False)),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        frequency=bt.algos.RunWeekly(),
        ls_kwargs=dict(combine=True),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

Overextension:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple(
            xf.bt.signals.df_ewm,
            xf.utils.funcs.overextension_df,
        ),
        kws=xt.iTuple(
            dict(alpha=2 / (span + 1), z=2 / 30),
            dict(),
        ),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(combine=True),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

Long only:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=2 / 31),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(short=None),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```

Long only weekly:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=2 / 31),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(short=None),
        frequency=bt.algos.RunWeekly(),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```


Short only:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=2 / 31),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(long=None),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```


Short only:

```{python}
#| code-fold: false
#| code-summary: ""
acc = {}
strats = []
for span in [5, 15, 30, 90, 180, 360, 720]:
    acc, strat = xf.bt.strategies.ls_equity_signal(
        acc,
        df_returns,
        df_universe,
        fs=xt.iTuple.one(xf.bt.signals.df_ewm),
        kws=xt.iTuple.one(dict(alpha=2 / (span + 1), z=2 / 31),
        universe_name="EU Single Name",
        signal_name="span({})".format(span),
        strat_kwargs = dict(equal=True, top_n=30),
        ls_kwargs=dict(long=None),
        frequency=bt.algos.RunWeekly(),
    )
    strats.append(strat)
res = xf.bt.backtests.run(acc, df_returns, *strats)
```

```{python}
#| code-fold: false
#| code-summary: ""
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: ""
res.stats
```
