---
title: "Backtest: Momentum (Naive)"
author: "Tom Williams"
date: "2023-08-08"
categories: []
draft: false
execute:
  daemon: false
---

In this post, ...

## Setup

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Auto reload"
%load_ext autoreload
%autoreload 2
```

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Environment"
import os
import sys
import importlib
sys.path.append("C:/hc/src")
sys.path.append("C:/hc/rambling")
sys.path.append("C:/hc/xfactors/src")
sys.path.append("C:/hc/xtuples/src")
os.environ["MODULE"] = "c:/hc/src/"
```

```{python}
#| code-fold: false
#| code-summary: "Imports"
import numpy
import pandas
import jax
import jax.numpy

import xtuples as xt
import xfactors as xf

import hcbt.data.prices.int as prices
import hcbt.algos.universe.int as universe
import hcbt.algos.universe.configs as configs
import bt
```

### Data


```{python}
#| code-fold: false
#| code-summary: "Returns"
df_returns = prices.returns_df(
    xf.utils.dates.y(2005),
    xf.utils.dates.y(2023, m=4),
    indices=configs.INDICES_MAJOR,
) 
``` 

The returns are from bloomberg, and include all cash and non-cash adjustments (in production we have a separate internal ticker for the dividend stream from a given name, but that's a little over-complicated for our purposes here).

We'll also load the relevant index membership mapping tables for our universe:

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
dfs_indices = universe.rolling_indices(
    xf.utils.dates.y(2005),
    xf.utils.dates.y(2023, m=4),
    indices=configs.INDICES_MAJOR,
)
df_universe = universe.index_union(dfs_indices)
```

reference: equal long only rolling universe

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.backtests.build(
    dict(

    ),
    dfs_indices,
    name="European Single Name: Equal Weighted",
    rolling_universe=True,
    equal=True,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

trend:

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 30,
    z=False,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```

now z score


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 30,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```



```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 60,
    z=False,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```



```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 60,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```





```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 180,
    z=False,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```



```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 180,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```



```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 15,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```



```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 15,
    z=True,
    equal=True,
    top_n=30,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```




```{python}
#| code-fold: false
#| code-summary: "Index Membership"
import bt
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 180,
    z=False,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunWeekly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```




```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=False,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunWeekly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```




```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 180,
    z=False,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunMonthly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```




```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=False,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunMonthly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


now some kind of non linear weighting




now over extension

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 30,
    z=True,
    equal=True,
    top_n=30,
    f_signal=xf.utils.funcs.overextension,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=True,
    equal=True,
    top_n=30,
    f_signal=xf.utils.funcs.overextension,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=2 / 30,
    equal=True,
    top_n=30,   
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=2 / 30,
    equal=True,
    top_n=30,
    f_signal=xf.utils.funcs.overextension,
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=False,
    equal=True,
    top_n=30,
    frequency=xf.bt.frequencies.RunRandomly(0.2)
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=False,
    equal=True,
    top_n=30,
    frequency=xf.bt.frequencies.RunRandomly(0.5)
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=False,
    equal=True,
    top_n=30,
    frequency=xf.bt.frequencies.RunRandomly(0.05)
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```


```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 360,
    z=2 / 30,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunWeekly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

 
```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 30,
    z=2 / 30,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunWeekly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

 
```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```
```{python}
#| code-fold: false
#| code-summary: "Index Membership"
acc, strat = xf.bt.strategies.long_short_trend(
    df_returns,
    dfs_indices,
    universe_name="EU Single Name",
    alpha=2 / 90,
    z=2 / 30,
    equal=True,
    top_n=30,
    frequency=bt.algos.RunWeekly()
)
res = xf.bt.backtests.run(
    strat,
    df_returns,
    acc,
)
```

 
```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.plot()
```

```{python}
#| code-fold: false
#| code-summary: "Index Membership"
res.stats
```