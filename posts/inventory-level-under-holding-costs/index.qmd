---
title: "Inventory: naive first model"
author: "Tom Williams"
date: "2023-01-08"
categories: []
draft: false
---

This is a first naive inventory management model.

Here, given distributions of holding cost, unit profit, and customer demand, we find the optimal level to reset our inventory to each period.

Setup:
```{python}
#| code-fold: true
#| code-summary: "Set module path"
import os
import sys
sys.path.append(os.environ["MODULE"])
```
Imports:
```{python}
import torch

import utils
import src.inspect
import src.graphs

```

We'll start with simplest model possible:

- Holding costs: constant w.r.t. quantity
- Unit profits: constant w.r.t. quantity
- Demand: gaussian.

```{python}
src.inspect.render_source(utils.holding_cost_constant)
```

```{python}
src.inspect.render_source(utils.profit_constant)
```

```{python}
src.inspect.render_source(utils.demand_gaussian)
```

And a function to step forward our model state through one step:

```{python}
src.inspect.render_source(utils.step_model)
```

We can then define a simple gradient descent fitting procedure for the profit maximising optimal inventory level:

```{python}
src.inspect.render_source(utils.fit_optimal_inventory)
```

Which, given some parameters:

```{python}
HOLDING_COST = torch.Tensor([.1])
PROFIT = torch.Tensor([.3])
DEMAND_MU = torch.Tensor([3.])
DEMAND_SD = torch.Tensor([.5])

```

We can run as so:

```{python}
losses, params = utils.fit_optimal_inventory(
    utils.holding_cost_constant(HOLDING_COST),
    utils.profit_constant(PROFIT),
    utils.demand_gaussian(
        DEMAND_MU,
        DEMAND_SD,
    ),
)
src.graphs.render_graphs([
    dict(
        f=src.graphs.line_graph,
        args = (
            list(range(len(losses))),
            losses,
        ),
        kwargs = dict(label = "loss", hlines=[0]),

    ),
])
print("Optimal inventory:", params["inventory_optimal"])
```

To better understand what's going on here, we can first collect a bunch of state samples at the optimal inventory level:

```{python}
samples = [
    utils.step_model(
        utils.holding_cost_constant(HOLDING_COST),
        utils.profit_constant(PROFIT),
        utils.demand_gaussian(
            DEMAND_MU,
            DEMAND_SD,
        ),
        params["inventory_optimal"],
    ) for i in range(300)
]
```

And then plot them:

```{python}
src.inspect.render_source(utils.f_sample_graph)
```

As so:

```{python}
sample_graph = utils.f_sample_graph(samples)

src.graphs.render_graphs([
    [
        sample_graph("demand", lambda s: True),
    ],
    [
        sample_graph("sales", lambda s: True),
        sample_graph("shortfall", lambda s: True),
    ],
])
```

As one can see, ... max sales at inventory.

We can also plot out the profit made when inventory covers customer demand, versus when there is an inventory short fall:

```{python}
src.graphs.render_graphs([
    [
        sample_graph("profit", lambda s: s["shortfall"].item() == 0),
        sample_graph("profit", lambda s: s["shortfall"].item() > 0),
    ],
])
```

As one can see, ...

However, this only shows part of the picture. 

To understand why this is the optimal inventory level, we also need to plot out the missed profit opportunities, resulting from an inventory shortfall leading to unsatisfied customer demand:

... Insert graph

... Graphs of various density functions

TODO:

- Given a gaussian cdf
- The optimal level is where 
    - the probability weighted profit when no shortfall
    - plus holding costs
    - ==
    - the probability weighted missed profit from shortfall
    - plus holding

- Can rearrange in terms of ratio of cdf to ratio of profit vs holding?

- Plot the various relationships

- Then sample empirically to verify