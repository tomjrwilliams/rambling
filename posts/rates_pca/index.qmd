---
title: "Rates: PCA"
author: "Tom Williams"
date: "2023-08-08"
categories: []
draft: false
execute:
  daemon: false
---

In this post, we demonstrate how to use PCA to extract a set of yield curve factors from historic market data.

We then provide an intuitive interpretation for the factors in terms of the level, slope, and curvature of the yield curve through time.

Before, finally, concluding with some examples of how the shape of the factors themselves vary through time, and the implications of this w.r.t. next steps.

## Setup

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Auto reload"
%load_ext autoreload
%autoreload 2
```

```{python}
#| echo: false
#| code-fold: true
#| code-summary: "Environment"
import os
import sys
import importlib
sys.path.append("C:/hc/rambling")
sys.path.append("C:/hc/xfactors/src")
sys.path.append("C:/hc/xtuples/src")
os.chdir("c:/hc/xfactors")
```

```{python}
#| code-fold: false
#| code-summary: "Imports"
import numpy
import pandas
import jax
import jax.numpy

import xtuples as xt
import xfactors as xf
```

### Data

```{python}
#| code-fold: false
#| code-summary: "Returns"
dfs_curves = xf.bt.data.curve_dfs(
    curves=xt.iTuple([
        "YCSW0023",
        "YCGT0025",
        "YCSW0045",
        "YCGT0016",
    ]).extend(
        xf.bt.data.curves.CORP_USD
    ).extend(
        xf.bt.data.curves.CORP_EUR
    ),
    dp="../xfactors/__local__/csvs"
)
dfs_curves = {
    curve: xf.utils.dfs.apply_na_threshold(
        df, na_threshold=(0., 0.,), na_padding=(0.2, 0.4,)
    )
    for curve, df in dfs_curves.items()
}
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
def curve_chart(d_start, d_end, curve):
    df = dfs_curves[curve]
    df = xf.utils.dfs.index_date_filter(df, date_start=d_start, date_end=d_end)
    df = xf.bt.data.enumerate_strip_curve(df, curve, reverse=True)
    return xf.visuals.graphs.df_line_chart(
        xf.utils.dfs.melt_with_index(df, index_as="date", variable_as="tenor"),
        x="date",
        y="value",
        color="tenor",
        discrete_color_scale="Blues",
    )
```

```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
def tenor_chart(d_start, d_end, tenor, curves):
    df = xf.bt.data.curves_by_tenor({
        curve: df for curve, df in dfs_curves.items() if curve in curves
    }, tenor = tenor)
    df = xf.utils.dfs.index_date_filter(df, date_start=d_start, date_end=d_end)
    df = xf.bt.data.enumerate_strip_tenor(df, tenor, reverse=True)
    return xf.visuals.graphs.df_line_chart(
        xf.utils.dfs.melt_with_index(df, index_as="date", variable_as="curve"),
        x="date",
        y="value",
        color="curve",
        discrete_color_scale="Blues",
    )
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
curve_chart(xf.utils.dates.y(2005), xf.utils.dates.y(2023), "USD-G")
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
curve_chart(xf.utils.dates.y(2005), xf.utils.dates.y(2023), "USD-S")
```

```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
tenor_chart(
    xf.utils.dates.y(2005),
    xf.utils.dates.y(2023),
    curves=xt.iTuple.from_keys(dfs_curves).filter(lambda s: "USD" in s),
    tenor="3M",
)
```

```{python}
#| code-fold: false
#| code-summary: "PCA Factor Corr"
def curve_corr(curve, d_start, d_end):
    df = dfs_curves[curve]
    df = xf.utils.dfs.index_date_filter(df, date_start=d_start, date_end=d_end)
    return xf.visuals.rendering.render_df_color_range(
        df.corr(),
        v_min=-1.,
        v_max=.1,
    )
curve_corr("USD-S", xf.utils.dates.y(2005), xf.utils.dates.y(2023))
```

```{python}
#| code-fold: false
#| code-summary: "PCA Factor Corr"
def curve_cov(curve, d_start, d_end):
    df = dfs_curves[curve]
    df = xf.utils.dfs.index_date_filter(df, date_start=d_start, date_end=d_end)
    return xf.visuals.rendering.render_df_color_range(
        df.cov(),
    )
curve_cov("USD-S", xf.utils.dates.y(2005), xf.utils.dates.y(2023))
```

```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
import functools
@functools.lru_cache(maxsize=10)
def fit_pca(curve, d_start, d_end, n = 3):
    df = dfs_curves[curve]
    df = xf.utils.dfs.index_date_filter(df, date_start=d_start, date_end=d_end)
    eigvals, eigvecs = xf.nodes.pca.vanilla.PCA.f(
        jax.numpy.transpose(df.values), n = n
    )
    return df, eigvals.real, eigvecs.real
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
def pca_weights_chart(curve, d_start, d_end):
    df, eigvals, eigvecs = fit_pca(curve, d_start, d_end)
    weights = pandas.DataFrame(
        eigvecs.T,
        columns=df.columns,
        index=list(range(eigvals.shape[0]))
    )
    return xf.visuals.graphs.df_facet_bar_chart(
        xf.utils.dfs.melt_with_index(weights, index_as="factor"),
        x="variable",
        y="value",
        facet="factor",
        title="{}: {} - {}".format(curve, d_start, d_end)
    )
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
def pca_path_chart(curve, d_start, d_end):
    df, eigvals, eigvecs = fit_pca(curve, d_start, d_end)
    factors = jax.numpy.matmul(df.values, eigvecs)
    factors_df = pandas.DataFrame(
        factors,
        columns=list(range(eigvals.shape[0])),
        index=df.index,
    )
    return xf.visuals.graphs.df_facet_line_chart(
        xf.utils.dfs.melt_with_index(factors_df, index_as="date"),
        x="date",
        y="value",
        facet="variable",
        title="{}: {} - {}".format(curve, d_start, d_end)
    )
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-S", xf.utils.dates.y(2005), xf.utils.dates.y(2023))
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-S", xf.utils.dates.y(2020), xf.utils.dates.y(2023))
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-S", xf.utils.dates.y(2010), xf.utils.dates.y(2015))
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-S", xf.utils.dates.y(2015), xf.utils.dates.y(2018))
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-G", xf.utils.dates.y(2005), xf.utils.dates.y(2023))
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-G", xf.utils.dates.y(2015), xf.utils.dates.y(2018))
```


```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-G", xf.utils.dates.y(2010), xf.utils.dates.y(2015))
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_weights_chart("USD-G", xf.utils.dates.y(2020), xf.utils.dates.y(2023))
```



```{python}
#| code-fold: true
#| code-summary: "Sector Weights Chart"
pca_path_chart("USD-G", xf.utils.dates.y(2020), xf.utils.dates.y(2023))
```



Comments:

- 2010 very shallow front end weights (then even slope butterfly in swaps / bonds around 18m point)

- Otherwise generally downward sloping slope (higher vol front end)

- with possible roll up of peak to around c, 2-3y point

- turn of the slope factor generally matches the peak of the belly of the butterfly (roughly)

- peak in level is often around the turn in slope, mroe bonds than swaps

but not always, can sometimes roll forward to sub 1y

- Varying pivot point in curvature